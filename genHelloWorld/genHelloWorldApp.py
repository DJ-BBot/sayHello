# python 3.11.5

"""
This project is going to generate a some lovely
java code and the associated gradle files for it.3
"""


class FileProps:
    __path_to_file: str = ""
    __file_name: str = ""
    __generator: callable = None

    def __init__(self, path_to_file: str, file_name: str, generator: callable):
        self.__file_name = file_name
        self.__path_to_file = path_to_file
        self.__generator = generator

    def mkdir(self) -> None:
        # Make a directory or pass.

        from os import makedirs
        try:
            makedirs(self.get_path(), exist_ok=True)
        except Exception as e:
            print(str(e))

    def write_file(self) -> None:
        # Generate content from the passed in method and write the file to its destination.

        content: str = self.__generator()
        self.mkdir()

        with open(self.get_path_to_file(), "w") as file_to_write:
            file_to_write.write(content)

    def get_path(self) -> str:
        return self.__path_to_file

    def get_name(self) -> str:
        return self.__file_name

    def get_path_to_file(self) -> str:
        from os import path
        return path.join(self.__path_to_file, self.__file_name)


def write_hello_world() -> str:
    # Output is a String representation of a file.

    file_content: str = """
/**
    @Description:
    This file is automatically generated as part of the genHelloWorldApp
    python script. It should not be modified.
*/ 

package com.HelloWorld;

public class HelloWorld {
    private String name;
    
    public HelloWorld(String name) {
        this.name = name;
    }
    
    public String sayHello() {
        return "Hello, " +  this.getName();
    }
    
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
}

    """

    return file_content


def write_hello_world_main() -> str:
    # Write the HelloWorldMain file.

    file_content: str = """
/**
    @Description:
    This file is automatically generated as part of the genHelloWorldApp
    python script. It should not be modified.
*/ 

package com.HelloWorld;

public class HelloWorldMain {
    public static void main(String [] args) {
        HelloWorld hw = new HelloWorld("User");
        System.out.println(hw.sayHello());
    }
}
    
    """
    return file_content


def write_build_gradle_kts() -> str:
    file_content: str = """
println(name)
println(project.name)

plugins {
    id("application")
    id("org.jetbrains.kotlin.jvm") version "1.9.22"
}

repositories {
    mavenCentral()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = "com.HelloWorld.HelloWorldMain"
}

version = "0.0.1"

    """

    return file_content


def add_scope_to_settings(path_to_settings: str, scope: str) -> bool:
    success: bool = True
    test_line: str = "include(\"" + scope + "\")"
    try:
        with open(path_to_settings, "r") as settings_file:
            lines: list[str] = settings_file.readlines()

        found_line: bool = False
        for line in lines:
            if line.strip() == test_line:
                found_line = True
                break
        if not found_line:
            lines.append(test_line)
            with open(path_to_settings, "w") as settings_file:
                settings_file.writelines(lines)
    except Exception as e:
        print(str(e))
        success = False

    return success


def remove_scope_from_settings(path_to_settings: str, scope: str) -> bool:
    success: bool = True
    test_line: str = "include(\"" + scope + "\")"
    try:
        with open(path_to_settings, "r") as settings_file:
            lines: list[str] = settings_file.readlines()

        found_line: bool = False
        for line in lines:
            if line.strip() == test_line:
                found_line = True
                lines.remove(line)
                break

        if found_line:
            with open(path_to_settings, "w") as settings_file:
                settings_file.writelines(lines)

    except Exception as e:
        print(str(e))
        success = False

    return success


def generate_project(proj_root: str, scope: str) -> bool:
    success: bool = True
    proj_src: str = proj_root + r"/src/main/java/com.HelloWorld"
    build_file: FileProps = FileProps(
        path_to_file=proj_root,
        file_name="build.gradle.kts",
        generator=write_build_gradle_kts
    )
    main_file:  FileProps = FileProps(
        path_to_file=proj_src,
        file_name="HelloWorldMain.java",
        generator=write_hello_world_main
    )
    src_file:   FileProps = FileProps(
        path_to_file=proj_src,
        file_name="HelloWorld.java",
        generator=write_hello_world
    )

    build_file.write_file()
    main_file.write_file()
    src_file.write_file()

    add_scope_to_settings(path_to_settings=r"../settings.gradle.kts", scope=scope)
    return success


def clean_project(proj_root: str, scope: str) -> bool:
    from os import path

    print("Removing the scope from settings")
    success: bool = remove_scope_from_settings(path_to_settings=r"../settings.gradle.kts", scope=scope)


    if success and path.exists(proj_root):
        # remove directory tree
        from shutil import rmtree
        try:
            print("Removing project tree")
            rmtree(proj_root)
        except Exception as e:
            print(str(e))
            success = False
    return success


def parseargs() -> bool:
    import argparse
    parser = argparse.ArgumentParser(prog="genHelloWorldApp")
    parser.add_argument("-c", "--clean", dest="clean", action="store_true", help="Clean the HelloWorld project")
    args = parser.parse_args()

    clean_build: bool = True
    if args.clean is None or not args.clean:
        clean_build = False

    return clean_build


def main() -> None:
    # The main method, generates Java and build.gradle.kts.
    perform_clean: bool = parseargs() # Parse arguments passed to the script

    proj_scope: str = r"HelloWorld"
    proj_root: str = r"../" + proj_scope

    if perform_clean:
        print("Calling Clean Project!")
        if not clean_project(proj_root=proj_root, scope=proj_scope):
            raise RuntimeError("ERROR::Unable to clean project files")
    else:
        if not generate_project(proj_root=proj_root, scope=proj_scope):
            raise RuntimeError("ERROR::Unable to generate project files")


if __name__ == "__main__":
    print("Calling main!")
    main()
